[{"title":"webapp实战美团开发 02 持续更新.....","date":"2019-10-14T07:54:12.000Z","path":"2019/10/14/webapp02/","text":"项目技术栈介绍1.前端框架Vue.js和全家桶 说到Vue.js相信大家都不会陌生，可以说是当前国内最流行的前端框架MVVM框架，本次项目也会采用Vue.js@2.6.10 版本来进行开发，其中包括了vue-router,vuex。当然为了照顾一些Vue.js的初学者，在后面的实战代码编写中，会穿插讲解其相关的知识点。 2.前端脚手架工具Vue Cli 3Vue Cli是基于Vue.js的前端项目脚手架生成工具，现在主要用的有两个版本，Vue Cli 2 和Vue Cli 3，折两个版本的cli生成的项目目录和相关配置都不太一样，本次实战将会采用最新的Vue Cli 3版本。 3.前端UL框架WuUIWeUI是一套微信视觉体验一致的基础杨式库，由微信官方设计团队为微信网页和微信小程序量身设计，我们采用WeUI主要是为了让我们的页面风格更贴近微信的风格。 4.前端动画效果Animate.css[Animate.css]是一个使用CSS3的animatin制作的动画效果的开源CSS效果集合，里面预设了很多种常用的动画，且使用非常简单，我们在项目中主要用来实现一些特效动画，以及结合vue-router实现各种页面转场效果。 5.Node.js和ExpressNode.js我就不多说了，它为前端工程师打开了后端的大门。Express是一个保持最小规模的灵活的Node.js web应用程序开发框架（说白了就是后端的MAC框架，如果大家接触过Java的SSH，或者是SSM应该很好理解），为web和移动应用程序提供了一组强大的功能。优点在于灵活，结合Express Generator，可以轻松的实现后端项目框架，我们在项目中的后台逻辑都是基于Express来编写，包括路由控制，API管理，数据库封装，以及登陆效验，以及登陆效验，状态保存等等。 6.后端数据库MongoDBMongoDB是一个基于分布式文件存储的数据库，是当前NoSQL数据库产品中最热门的一种。我们实战项目的数据库建模包括Post表、User表、Chat表等等，都是借助于mongoose是MongoDB的一个对象模型工具，封装了MongoDB对文档的一些增删改查等常用方法，让Node.js操作MongoDB数据库变得更加容易（说白了就是用面向对象的思想去操作数据库，而且还没有关系型数据库的.sql脚本，用起来更加轻便）。所以我们的后端技术栈可以理解为：Node.js+Express+MongoDB 7.PWA离线应用PWA（progressing web app），渐进式网页应用程序，是Google在2016年Google/O大会上提出的下一代web应用模型，并在随后的日子里迅速发展。一个PWA应用首先是一个网页，可以通过web技术编写一个网页应用。随后添加上App Manifest 和 Service Worker来实现PWA的安装和离线等功能。我们在项目的收尾阶段，会将项目构建成一个PWA应用，看起来更像是”APP”。 8.阿里云部署为了使大家掌握更加完整的项目部署相关知识，我们的实战项目将会真实的部署在阿里云上面，同时会教大家：购买阿里云———&gt;配置FTP功能———&gt;配置pm2管理工具———&gt;项目发布的一条龙服务。让大家真实的体会到自己的项目在线上环境中的运行。 微信：ck2211314 做的不好还请多指教感谢 有需要到我得地方 可以加我微信 也可以交个朋友","tags":[{"name":"webapp","slug":"webapp","permalink":"https://chenkun.de/tags/webapp/"}]},{"title":"webapp实战美团开发 01  持续更新.....","date":"2019-10-13T02:33:44.000Z","path":"2019/10/13/webapp01/","text":"最近在慕课网上学了一个实战课程，觉得还是蛮使用的可以提升一下，就跟大家分享一下。也是为了巩固知识点嘻嘻😄。主攻web前端开发，移动web方向（也叫HTML5业务，一个坑很多的领域），这个课程主要是webapp美团开发实战，这个课程主要使用移动web技术于Hybrid技术去开发移动WebApp，结合React全家桶技术作为前端框架 ，是一个前端项目的课程。 本次课程是一个结合Vue.js和移动web开发，以及Node.js和MongoDb开发实现的全栈项目，并且会采用阿里云相关的服务来实现真正能上线体验的真实企业级业务。 相信作为一个前端工程师来讲，你或多或少都回接触一些工作上的业务，并且在工作之余写过一下demo来丰富自己的技术范围，但是一个真正和企业级项目和一般的练手项目有某些方面还是有不少区别的： 1.服务器的申请和相关域名的申请，你以及Nginx的配置等相关的一些运维工作、短信和图床存储等公共第三方服务的选择；2.前端页面的兼容性问题，比如移动端web项目，你可能需要至少5款Android和IOS手机来测试兼容性和适配性，以及在代码编写过程中，也要区分不同机型，因为不同机型可能有着不同的逻辑；3.后端相关的部署上，保证服务的高效性和稳定性，比如如何进行管理，负载均衡等问题。 保持一个严谨的态度是一个企业级项目必不可少的。除此以外，不管你是一个初级前端的小白玩家，还是要给混迹多年的前端大佬，Vue.js及相关的技术栈作为现在最流行的前端框架之一，如何在项目中充分的使用它们；移动web开发技术和传统的PC开发到底有何区别；如何进行屏幕适配；如何在移动端开发高效的CSS3动画等；在使用Node.js和Express框架开发后台接口时，如何对数据建模；如何实现用户认证，权限效验；如何利用ScoKet.io开发高并发的聊天接口；MongoDB和Mongoose到底有什么区别；如何使用Mongose进行复杂数据的高效增删改查；如何结合当下流行的PWA技术让项目的用户体验像一个真正的WebApp，结合阿里云服务如何进行真实的线上发版和部署，这些问题我都会一一为大家解答。 课程主要分为三大部分： 第一部分： 在功能上主要讲解相关技术栈和相关环境的搭建和准备工作。其中包括知识点： 1.页面适配方案对比（rem和vm）；2.Vue cli3和Express-generator使用讲解；3.Chrome模拟器的简单使用 第二部分 主要讲解了实战项目的页面逻辑开发。 1.登陆页面逻辑和后端开发，此模块涉及的知识点如下： WuUl使用讲解 如何在项目中使用Vuex SE7的async和await的使用技巧 如何在Express框架中集成用户效验JSON Web Token 机制 使用第三方阿里云短信服务完成登陆验证 2.发布页面的前后端逻辑开发，以及移动端图片上传功能，此模块涉及的知识点如下： 企业级阿里云图片服务如何接入 HTML5的input使用技巧讲解 Mongoose的多表关联讲解 3.朋友圈首页的前后端逻辑开发，以及各种下拉刷新功能、图片查看器功能、底部键功能等开发，此模块涉及的知识点如下： 移动端滚动加载的原理和Vue.js里插槽slot的使用方法 Vue.js利用transition实现动画特效 移动端touch时间全解析 CSS3transform实现下拉动画特效 移动端键盘问题总结以及Vue.js的EventBus组件通信 Mongoose关联排序查询讲解 4.个人信息页面的前后端逻辑开发，此模块涉及的知识点如下： Mongoose更新数据updata方法和find方法讲解 Vue-router中的Query的params区别 5.私信聊天页面的前后端逻辑开发，此模块涉及的知识点如下： 移动端常用的滚动方式讲解 移动端键盘和fixed元素问题讲解 Mongoose使用or和and条件查询讲解 Socket.io的用法讲解 6.私信列表页面的前后端逻辑开发，此模块的知识点如下： Vuex里修改store的状态技巧讲解 Mongoose里如何使用模糊查询讲解 第三部分主要讲解了实战项目的性能优化、用户体验优化以及PWA技术的引入，然后是项目的线上部署和相关的运维问题。此模块涉及的知识点如下： 1.Animate.css并结合Vue-router实现页面专场动画2.PWA和Service Worker全方面解析3.Web Push和Web Notification技术讲解4.跨域知识点讲解以及Svg-captcha验证码模块使用5.阿里云服务器部署、Ngin配置、域名申请、PM2使用讲解 在学习本课程之前，你需要掌握一定的前端知识，包括HTML、CSS、javaScript以及Node.js，你可以在w3cchool进行基础知识的学习。另外如果你使用过Vue.js，也可以先学习Vue.js快速上手。 微信：ck2211314 做的不好还请多指教感谢 有需要到我得地方 可以加我微信 也可以交个朋友","tags":[{"name":"webapp","slug":"webapp","permalink":"https://chenkun.de/tags/webapp/"}]},{"title":"js常见面试题1","date":"2019-10-12T07:02:49.000Z","path":"2019/10/12/jssite/","text":"第一题123456function setName()&#123; name = \"张三\"&#125;setName()console.log('setName')答案： 张三 第二题12345678//考点：1.变量声明提升 2.变量搜索机制var a = 1function test()&#123; console.log(a) var a = 1;&#125;test();答案：undefined 第三题1234567var b = 2;function text2()&#123; window.b=3; console.log();&#125;test2;答案：3 第四题12345678c=5; //声明一个全局变量cfunction test3()&#123; window.c=3; console.log(3) 答案：undefined,原因：由于此时得c是一个局部变量c，并没有被赋值 var c; console.log(window.c); //答案：3,原因：这里得c就是一个全局变量c&#125;test3(); 第五题123456var arr = [];arr[0] = 'a';arr[1] = 'b';arr[10] = 'c';alert(arr.length)//答案：11console.log(arr[5]) //答案：undefined 第六题123var a = 1;console.log(a++); 答案：1console.log(++a); 答案：3 第七题123console.log(null==undefined) //答案：trueconsole.log(\"1\"==1) //答案：true,因为会将数字1先转换为字符串1console.log(\"1\"===1) //答案：false,因为数据类型不一致 第八题12345678typeof 1; \"number\"typeof \"hello\"; \"string\"typeof /[0-9]/; \"object\"typeof&#123;&#125;; \"object\"typeof null; \"object\"typeof undefined; \"undefined\"typeof [1,2,3] \"object\"typeof function()&#123;&#125; //\"function\" 第九题1234parseInt(3.14) //3parseFloat(\"3asdr\") //3parseInt(\"1.23abc456\")parseInt(true); \"true\"NaN 第十题12345678//考题：函数声明提前function bar()&#123; return foo; foo = 10; function foo()&#123;&#125; //var foo = 11;&#125;alert(typeof bar());//\"function\" 第十一题：函数声明提前123456789var foo = 1;function bar()&#123; foo = 10; return; function foo()&#123;&#125;&#125;bar()alert(foo);//答案：1 第十二题1234console.log(a); //是一个函数var a = 3;function a()&#123;&#125;console.log(a) //3 第十三题123456//考点：对arfuments得操作function foo(a)&#123; arguments[0] = 2; alert(a); //答案：2，因为：arguments是对实参得访问，b、通过arguments[i]可以修改指定实参得&#125;foo(1) 第十四题1234function foo(a)&#123; alert(arguments.length);//答案：3，因为arguments是对实参的访问&#125;foo(1,2,3); 第十五题12345678910bar();//报错var foo = function bar()&#123; console.log(\"hello\"+name); console.log(\"bar\");&#125;;//arert(typeof bar);foo(\"world\");//\"hello\"console.log(bar); //undefinedconsole.log(foo.toString());bar();//报错 第十六题：以下执行会有什么输出1234567891011function test()&#123; console.log(\"test 函数\");&#125;setTimeout(function()&#123; console.log(\"定时器回调函数\")&#125;)test();结果：test函数定时器回调函数 微信：ck2211314 做的不好还请多指教感谢 有需要到我得地方 可以加我微信 也可以交个朋友","tags":[{"name":"js","slug":"js","permalink":"https://chenkun.de/tags/js/"}]},{"title":"去input button间距得三种方法","date":"2019-10-08T07:54:20.000Z","path":"2019/10/08/cssbutton/","text":"不去间距 去过间距 如上图所示不去间距得时候input跟button之间会有个小缝隙 这并不是我们想要得方法如下 1.在父级元素上添加font-size:0px;{ font-size:0px }2.删除button 和 input 之间得空格错误 &lt;input type=&quot;text&quot; placeholder=&quot;请输入商家或地点&quot;&gt; &lt;button&gt;按钮&lt;/button&gt; 正确 &lt;input type=&quot;text&quot; placeholder=&quot;请输入商家或地点&quot;&gt;&lt;button&gt;按钮&lt;/button&gt;3.把左方得元素转换成块元素 添加上浮动input{ display:block; float:left; }","tags":[{"name":"css","slug":"css","permalink":"https://chenkun.de/tags/css/"}]},{"title":"webpack安装失败","date":"2019-09-28T13:43:26.000Z","path":"2019/09/28/webpack安装失败/","text":"今天做东西需要到了很久没有用都快忘了得webpack哈哈哈 捣鼓了一会 安装了几次一直安装失败报错内容日如下就One CLI for webpack must be installed. These are recommended choices, delivered as separate packages: - webpack-cli (https://github.com/webpack/webpack-cli) The original webpack full-featured CLI. We will use &quot;npm&quot; to install the CLI via &quot;npm install -D&quot;. Do you want to install &apos;webpack-cli&apos; (yes/no): yes Installing &apos;webpack-cli&apos; (running &apos;npm install -D webpack-cli&apos;)... npm ERR! code EINVALIDPACKAGENAME npm ERR! Invalid package name &quot;_cross-spawn@6.0.5@cross-spawn&quot;: name cannot start with an underscore; name can only contain URL-friendly characters npm ERR! A complete log of this run can be found in: npm ERR! C:\\Users\\Administrator\\AppData\\Roaming\\npm-cache\\_logs\\2019-09-25T02_18_08_557Z-debug.log undefined百度了一下先全局安装webpack和webpack-clinpm install webpack -gnpm install webpack-cli -g再局部安装webpack和webpack-clinpm install webpack –save-devnpm install webpack-cli –save-dev这样就可以了 微信：ck2211314 做的不好还请多指教感谢 有需要到我得地方 可以加我微信 也可以交个朋友","tags":[{"name":"webpack","slug":"webpack","permalink":"https://chenkun.de/tags/webpack/"}]},{"title":"1.小程序页面布局实例详情页","date":"2019-08-26T09:18:47.000Z","path":"2019/08/26/小程序页面布局实例/","text":"页面图片如下图最近在学习微信小程序，下面提供自己做的微信小程序详情页页面，仅供参考。话不多说直接上图 目录结构 下面是代码： list.wxml&lt;view class=&quot;box1&quot;&gt; &lt;view class=&quot;tab-item active&quot;&gt; &lt;text&gt;热销榜&lt;/text&gt; &lt;view class=&quot;tab-line&quot;&gt;&lt;/view&gt; &lt;/view&gt; &lt;view class=&quot;tab-item&quot;&gt; &lt;text&gt;人气榜&lt;/text&gt; &lt;view class=&quot;&quot;&gt;&lt;/view&gt; &lt;/view&gt; &lt;/view&gt; &lt;view class=&quot;my-tabs-content&quot;&gt; &lt;view class=&quot;content-item&quot;&gt; &lt;view&gt;&lt;image class=&quot;img&quot; src=&quot;../../images/d1.jpg&quot;&gt;&lt;/image&gt;&lt;/view&gt; &lt;view class=&quot;info&quot;&gt; &lt;view class=&quot;name&quot;&gt; &lt;text&gt;香辣虾尾普通版&lt;/text&gt; &lt;/view&gt; &lt;view class=&quot;price-info&quot;&gt; &lt;text class=&quot;price&quot;&gt;$17&lt;/text&gt; &lt;text class=&quot;promotion discount&quot;&gt;限时优惠8折&lt;/text&gt; &lt;text class=&quot;promotion postage-included&quot;&gt;包邮&lt;/text&gt; &lt;/view&gt; &lt;view class=&quot;original-price-sales&quot;&gt; &lt;text class=&quot;price&quot;&gt;原价12.5&lt;/text&gt; &lt;text class=&quot;sales&quot;&gt;销量：2000&lt;/text&gt; &lt;/view&gt; &lt;/view&gt; &lt;/view&gt; &lt;view class=&quot;content-item&quot;&gt; &lt;view&gt;&lt;image class=&quot;img&quot; src=&quot;../../images/d1.jpg&quot;&gt;&lt;/image&gt;&lt;/view&gt; &lt;view class=&quot;info&quot;&gt; &lt;view class=&quot;name&quot;&gt; &lt;text&gt;香辣虾尾普通版&lt;/text&gt; &lt;/view&gt; &lt;view class=&quot;price-info&quot;&gt; &lt;text class=&quot;price&quot;&gt;$17&lt;/text&gt; &lt;text class=&quot;promotion discount&quot;&gt;限时优惠8折&lt;/text&gt; &lt;text class=&quot;promotion postage-included&quot;&gt;包邮&lt;/text&gt; &lt;/view&gt; &lt;view class=&quot;original-price-sales&quot;&gt; &lt;text class=&quot;price&quot;&gt;原价12.5&lt;/text&gt; &lt;text class=&quot;sales&quot;&gt;销量：2000&lt;/text&gt; &lt;/view&gt; &lt;/view&gt; &lt;/view&gt; &lt;view class=&quot;content-item&quot;&gt; &lt;view&gt;&lt;image class=&quot;img&quot; src=&quot;../../images/d1.jpg&quot;&gt;&lt;/image&gt;&lt;/view&gt; &lt;view class=&quot;info&quot;&gt; &lt;view class=&quot;name&quot;&gt; &lt;text&gt;香辣虾尾普通版&lt;/text&gt; &lt;/view&gt; &lt;view class=&quot;price-info&quot;&gt; &lt;text class=&quot;price&quot;&gt;$17&lt;/text&gt; &lt;text class=&quot;promotion discount&quot;&gt;限时优惠8折&lt;/text&gt; &lt;text class=&quot;promotion postage-included&quot;&gt;包邮&lt;/text&gt; &lt;/view&gt; &lt;view class=&quot;original-price-sales&quot;&gt; &lt;text class=&quot;price&quot;&gt;原价12.5&lt;/text&gt; &lt;text class=&quot;sales&quot;&gt;销量：2000&lt;/text&gt; &lt;/view&gt; &lt;/view&gt; &lt;/view&gt; &lt;view class=&quot;content-item&quot;&gt; &lt;view&gt;&lt;image class=&quot;img&quot; src=&quot;../../images/d1.jpg&quot;&gt;&lt;/image&gt;&lt;/view&gt; &lt;view class=&quot;info&quot;&gt; &lt;view class=&quot;name&quot;&gt; &lt;text&gt;香辣虾尾普通版&lt;/text&gt; &lt;/view&gt; &lt;view class=&quot;price-info&quot;&gt; &lt;text class=&quot;price&quot;&gt;$17&lt;/text&gt; &lt;text class=&quot;promotion discount&quot;&gt;限时优惠8折&lt;/text&gt; &lt;text class=&quot;promotion postage-included&quot;&gt;包邮&lt;/text&gt; &lt;/view&gt; &lt;view class=&quot;original-price-sales&quot;&gt; &lt;text class=&quot;price&quot;&gt;原价12.5&lt;/text&gt; &lt;text class=&quot;sales&quot;&gt;销量：2000&lt;/text&gt; &lt;/view&gt; &lt;/view&gt; &lt;/view&gt; &lt;/view&gt;list.wxml.box1{ display: flex; background:#fff; padding-top: 24rpx; flex-direction: row; justify-content: space-between; margin:0 180rpx; padding-bottom: 20rpx; } .box .tab-item{ font-size: 15rpx; color: #999; } .active{ border-bottom: 5rpx solid #353535; } .my-tabs-content{ display: flex; flex-direction: column; background:#fff; } .my-tabs-content .content-item{ display: flex; flex-direction: row; margin-bottom: 46rpx; } .my-tabs-content .content-item .img{ display: flex; flex-direction: row; margin-left: 20rpx; width: 180rpx; height: 180rpx; } .my-tabs-content .content-item .info{ display: flex; flex-direction: column; margin:20rpx; width: 100%; } .my-tabs-content .content-item .info .name,.price-info{ text-align: left; font-size: 15px; color: #000; margin-top: 16rpx; } .my-tabs-content .content-item .info .price-info{ display: flex; flex-direction: row; align-items: center; margin-top:16rpx; } .my-tabs-content .content-item .info .price-info .price{ font-size: 15px; color: #ff3b53; font-weight: bold; } .my-tabs-content .content-item .info .price-info .promotion{ font-size: 12px; font-weight: bold; border: solid 1px #ff3b53; margin-left: 15rpx; padding: 4rpx 6rpx; } .my-tabs-content .content-item .info .price-info .discount{ border-color: #ff3b53; color: #ff3b53; } .my-tabs-content .content-item .info .price-info .postage-included{ border-color: #fb7802; color: #fb7802; } .my-tabs-content .content-item .info .price-info .discount{ border-color: #ff3b53; background: #ff3b53; color: #fff; } .my-tabs-content .content-item .original-price-sales{ display: flex; flex-direction: row; justify-content: space-between; margin-top: 10rpx; font-size: 12px; color: #999; } 微信：ck2211314 做的不好还请多指教感谢 有需要到我得地方 可以加我微信 也可以交个朋友","tags":[{"name":"小程序","slug":"小程序","permalink":"https://chenkun.de/tags/小程序/"}]},{"title":"直白的话告诉你在 javascript 中如何用 jsonp 实现跨域请求","date":"2019-07-09T08:28:52.000Z","path":"2019/07/09/my-first-blog/","text":"前言 这边文档希望通过自己对jsonp的理解，能够采用最简单、最直白的语言告诉大家jsonp是干嘛的！当然，其间难免有纰漏之处，希指正出来！jsonp能解决的问题 首先我们需要jsonp是干嘛的，它是一种解决浏览器跨域问题的方案，说道这里什么是浏览器跨域呢！说白了，就是浏览器内部有一种机制为了保证每个站点之间的请求达到安全、独立，相互交互不乱套等，浏览器阻止了不同源站点之间的请求。如果不采用跨域的话，浏览器将会报错的。 &lt;!DOCTYPE html&gt; &lt;html lang=&quot;Zh-cn&quot;&gt; &lt;head&gt; &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;/&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,Chrome=1.0&quot;/&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,user-scalable=no&quot;/&gt; &lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;/&gt; &lt;meta name=&quot;Keywords&quot; content=&quot;&quot;/&gt; &lt;meta name=&quot;description&quot; content=&quot;&quot;/&gt; &lt;title&gt;demo&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=&quot;text/javascript&quot;&gt; (function(){ var xhr = new XMLHttpRequest(); xhr.open(&apos;GET&apos;,&apos;http://localhost/demo/demo1.php&apos;,true); xhr.send(); xhr.onreadystatechange = function(){ if(xhr.status == 200 &amp;&amp; xhr.readyState == 4){ console.log(xhr.responseText); }else{ console.log(&apos;什么都没有&apos;); }; }; xhr.onerror = function(){ console.log(&apos;请求出错了！&apos;); }; })(); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;我们通过上面的页面在请求资源时可以看到下面请求跨域错误提示： 怎样理解跨域，以及它跟浏览器的关系呢！ 首先我们不想把概念说的神乎其神，但是大家要理解下面说的话，可以先看下《http报文权威指南》了解下相关概念！这里指出一下，如果只是从http请求的方面来说，上面的页面请求是没有什么问题的，而且也不会报错，因为http本身是无状态的，它也不知道请求的是谁，被请求的是谁，它只知道客户端有请求，服务器把客户端需要的东西返回就好了！上面的页面之所以会报错，是由于浏览器自己带有了一种叫做同源策略的安全机制产生的！ 什么是同源策略，相关概念可以自行google或百度，说白了就是一种机制促使浏览器限制不同源之间的请求。这里说一下什么样的请求是不同源的，看下面的表格： | www.demo.com | www.demo.com | 这是不同源的，因为协议不同| www.demo1.com | www.demo2.com | 这是不同源的，因为主机不同| www.demo.com:80 | www.demo.com:8080 | 这是不同源的，因为协议不同 怎么解决跨域请求问题呢！ 常见的和自己熟悉有几种方案，如：1、用cros；2、用代理；3、使用jsonp。这里只对jsonp介绍，其他的方案可以自行查看相关文档。 jsonp的原理 jsonp原理其实很简单，首先我们先回归一个现实：我们发现，当我们在html插入img、a、script标签的时候，它们是没有同源限制的。所以jsonp的原理就是利用img、script等标签插入一个请求地址，让不同源的请求远离浏览器的同源策略限制。 实（示）例&lt;!DOCTYPE html&gt; &lt;html lang=&quot;Zh-cn&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;/&gt; &lt;title&gt;demo&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost/demo/demo1.php&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 后台demo1.php代码如下: &lt;?php echo &quot;console.log(&apos;欢迎访问demo1.php页面&apos;)&quot;; ?&gt;控制台打印结果截图如下： 怎么实现精确回调呢！ 有时候我们并不是只是见到的得到后台数据就好了，还要到前台进行一些处理，那怎么做呢！恩，没错就是使用回调，首先说一下思路：1、首先在页面中定义好回调函数；2、然后在页面通过插入相关标签待query参数的形式实现jsonp请求传递回调函数名字；3、后台得到回调函数名字，并将需要处理的数据传递给回调函数，最后向前台返回回调函数的“调用”，最后一步切记是传回回调函数的调用。示例如下： 前台代码 &lt;!DOCTYPE html&gt; &lt;html lang=&quot;Zh-cn&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;/&gt; &lt;title&gt;demo&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=&quot;text/javascript&quot;&gt; //第一步，现在前台定义回调函数 function addNum(num1,num2){ var sum = num1 + num2; console.log(&quot;两数相加的结果是&quot;+sum); return sum; }; //第二步，插入script标签并通过传入query参数的形式传递回调函数的名字给后台 (function(){ var _script = document.createElement(&apos;script&apos;); _script.type = &apos;text/javascript&apos;; _script.src = &apos;http://localhost/demo/demo2.php?callback=addNum&apos;; document.body.appendChild(_script); })(); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;后台demo2.php代码如下： 1234567891011&lt;?php /*第三步，获取前台传过来的回调函数的名字*/ $fontEndCallback = $_GET['callback'];//addNum; /*这里我们先模拟两个数据$num1,$num2， 实际生产环境中可能就是查询数据库等操作获取数据 */ $num1 = 15; $num2 = 30; /*最后切记是返回回调函数的调用，一定记得是调用*/ echo $fontEndCallback.\"($num1,$num2)\";//这里的‘.’相当于js里面的字符串连接操作，等同+ ?&gt; 控制台结果截图如下： 只要弄懂这三步你就会对jsonp心领神会了！ jsonp跟ajax的区别、jsonp和json的区别 首先严格来说，jsonp和ajax是没有关系，唯一的相同点可能就是都是向后台发请求！jsonp和json也是没有关系的，虽然看上去名字很像，但是jsonp描述的是一种请求数据的跨域方式，而json是一种数据格式！ 微信：ck2211314 做的不好还请多指教感谢 有需要到我得地方 可以加我微信 也可以交个朋友","tags":[{"name":"js","slug":"js","permalink":"https://chenkun.de/tags/js/"}]}]